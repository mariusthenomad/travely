import{h as R,i as C,j as B,k as M,l as x,m as G,o as D}from"./chunk-XE2UPAEC.js";import{a as A,e as F,f as h}from"./chunk-4LRODYL5.js";import{getMultipartBoundary as W,parseMultipartStream as K}from"@mjackson/multipart-parser";import"path/posix";import{fileURLToPath as v}from"url";import q from"openapi-fetch";import{z as k}from"zod";function P(i,d,m={}){return q({baseUrl:i,headers:{Authorization:`Bearer ${d}`,...m}})}var L=k.object({message:k.string()});function s(i,d){if("error"in i){if(i.response.status===401)throw new Error("Unauthorized. Please provide a valid access token to the MCP server via the --access-token flag or SUPABASE_ACCESS_TOKEN.");let{data:m}=L.safeParse(i.error);throw m?new Error(m.message):new Error(d)}}var $="ABCDEFGHIJKLMNOPQRSTUVWXYZ",H="abcdefghijklmnopqrstuvwxyz",N="0123456789",I="!@#$%^&*()_+~`|}{[]:;?><,./-=",z=({length:i=10,numbers:d=!1,symbols:m=!1,uppercase:b=!0,lowercase:r=!0}={})=>{let c="";if(b&&(c+=$),r&&(c+=H),d&&(c+=N),m&&(c+=I),c.length===0)throw new Error("at least one character set must be selected");let O=new Uint32Array(i);crypto.getRandomValues(O);let E="";for(let w=0;w<i;w++){let S=O[w]%c.length;E+=c.charAt(S)}return E};var{version:J}=A;function le(i){let{accessToken:d,apiUrl:m}=i,b=m??"https://api.supabase.com",r=P(b,d),c={async listOrganizations(){let t=await r.GET("/v1/organizations");return s(t,"Failed to fetch organizations"),t.data},async getOrganization(t){let e=await r.GET("/v1/organizations/{slug}",{params:{path:{slug:t}}});return s(e,"Failed to fetch organization"),e.data},async listProjects(){let t=await r.GET("/v1/projects");return s(t,"Failed to fetch projects"),t.data},async getProject(t){let e=await r.GET("/v1/projects/{ref}",{params:{path:{ref:t}}});return s(e,"Failed to fetch project"),e.data},async createProject(t){let{name:e,organization_id:a,region:n,db_pass:o}=R.parse(t),p=await r.POST("/v1/projects",{body:{name:e,region:n,organization_id:a,db_pass:o??z({length:16,numbers:!0,uppercase:!0,lowercase:!0})}});return s(p,"Failed to create project"),p.data},async pauseProject(t){let e=await r.POST("/v1/projects/{ref}/pause",{params:{path:{ref:t}}});s(e,"Failed to pause project")},async restoreProject(t){let e=await r.POST("/v1/projects/{ref}/restore",{params:{path:{ref:t}}});s(e,"Failed to restore project")}},O={async executeSql(t,e){let{query:a,read_only:n}=x.parse(e),o=await r.POST("/v1/projects/{ref}/database/query",{params:{path:{ref:t}},body:{query:a,read_only:n}});return s(o,"Failed to execute SQL query"),o.data},async listMigrations(t){let e=await r.GET("/v1/projects/{ref}/database/migrations",{params:{path:{ref:t}}});return s(e,"Failed to fetch migrations"),e.data},async applyMigration(t,e){let{name:a,query:n}=G.parse(e),o=await r.POST("/v1/projects/{ref}/database/migrations",{params:{path:{ref:t}},body:{name:a,query:n}});s(o,"Failed to apply migration")}},E={async getLogs(t,e){let{sql:a,iso_timestamp_start:n,iso_timestamp_end:o}=D.parse(e),p=await r.GET("/v1/projects/{ref}/analytics/endpoints/logs.all",{params:{path:{ref:t},query:{sql:a,iso_timestamp_start:n,iso_timestamp_end:o}}});return s(p,"Failed to fetch logs"),p.data},async getSecurityAdvisors(t){let e=await r.GET("/v1/projects/{ref}/advisors/security",{params:{path:{ref:t}}});return s(e,"Failed to fetch security advisors"),e.data},async getPerformanceAdvisors(t){let e=await r.GET("/v1/projects/{ref}/advisors/performance",{params:{path:{ref:t}}});return s(e,"Failed to fetch performance advisors"),e.data}},w={async getProjectUrl(t){let e=new URL(b);return`https://${t}.${V(e.hostname)}`},async getAnonKey(t){let e=await r.GET("/v1/projects/{ref}/api-keys",{params:{path:{ref:t},query:{reveal:!1}}});s(e,"Failed to fetch API keys");let a=e.data?.find(n=>n.name==="anon");if(!a?.api_key)throw new Error("Anonymous key not found");return a.api_key},async generateTypescriptTypes(t){let e=await r.GET("/v1/projects/{ref}/types/typescript",{params:{path:{ref:t}}});return s(e,"Failed to fetch TypeScript types"),e.data}},S={async listEdgeFunctions(t){let e=await r.GET("/v1/projects/{ref}/functions",{params:{path:{ref:t}}});return s(e,"Failed to fetch Edge Functions"),e.data.map(a=>{let n=F(t,a.id,a.version),o=a.entrypoint_path?h({deploymentId:n,filename:v(a.entrypoint_path,{windows:!1})}):void 0,p=a.import_map_path?h({deploymentId:n,filename:v(a.import_map_path,{windows:!1})}):void 0;return{...a,entrypoint_path:o,import_map_path:p}})},async getEdgeFunction(t,e){let a=await r.GET("/v1/projects/{ref}/functions/{function_slug}",{params:{path:{ref:t,function_slug:e}}});if(a.error)throw a.error;s(a,"Failed to fetch Edge Function");let n=a.data,o=F(t,n.id,n.version),p=n.entrypoint_path?h({deploymentId:o,filename:v(n.entrypoint_path,{windows:!1})}):void 0,_=n.import_map_path?h({deploymentId:o,filename:v(n.import_map_path,{windows:!1})}):void 0,g=await r.GET("/v1/projects/{ref}/functions/{function_slug}/body",{params:{path:{ref:t,function_slug:e}},headers:{Accept:"multipart/form-data"},parseAs:"stream"});s(g,"Failed to fetch Edge Function files");let f=g.response.headers.get("content-type");if(!f||!f.startsWith("multipart/form-data"))throw new Error(`Unexpected content type: ${f}. Expected multipart/form-data.`);let l=W(f);if(!l)throw new Error("No multipart boundary found in response headers");if(!g.data)throw new Error("No data received from Edge Function body");let u=[],T=K(g.data,{boundary:l});for await(let y of T)y.isFile&&y.filename&&u.push({name:h({deploymentId:o,filename:y.filename}),content:y.text});return{...n,entrypoint_path:p,import_map_path:_,files:u}},async deployEdgeFunction(t,e){let{name:a,entrypoint_path:n,import_map_path:o,files:p}=M.parse(e),_;try{_=await S.getEdgeFunction(t,a)}catch{}let g=p.find(l=>["deno.json","import_map.json"].includes(l.name));o??=_?.import_map_path??g?.name;let f=await r.POST("/v1/projects/{ref}/functions/deploy",{params:{path:{ref:t},query:{slug:a}},body:{metadata:{name:a,entrypoint_path:n,import_map_path:o},file:p},bodySerializer(l){let u=new FormData,T=new Blob([JSON.stringify(l.metadata)],{type:"application/json"});return u.append("metadata",T),l.file?.forEach(y=>{let j=y,U=new Blob([j.content],{type:"application/typescript"});u.append("file",U,j.name)}),u}});return s(f,"Failed to deploy Edge Function"),f.data}};return{async init(t){let{clientInfo:e}=t;if(!e)throw new Error("Client info is required");r=P(b,d,{"User-Agent":`supabase-mcp/${J} (${e.name}/${e.version})`})},account:c,database:O,debugging:E,development:w,functions:S,branching:{async listBranches(t){let e=await r.GET("/v1/projects/{ref}/branches",{params:{path:{ref:t}}});return e.response.status===422?[]:(s(e,"Failed to list branches"),e.data)},async createBranch(t,e){let{name:a}=C.parse(e),n=await r.POST("/v1/projects/{ref}/branches",{params:{path:{ref:t}},body:{branch_name:a}});return s(n,"Failed to create branch"),n.data},async deleteBranch(t){let e=await r.DELETE("/v1/branches/{branch_id}",{params:{path:{branch_id:t}}});s(e,"Failed to delete branch")},async mergeBranch(t){let e=await r.POST("/v1/branches/{branch_id}/merge",{params:{path:{branch_id:t}},body:{}});s(e,"Failed to merge branch")},async resetBranch(t,e){let{migration_version:a}=B.parse(e),n=await r.POST("/v1/branches/{branch_id}/reset",{params:{path:{branch_id:t}},body:{migration_version:a}});s(n,"Failed to reset branch")},async rebaseBranch(t){let e=await r.POST("/v1/branches/{branch_id}/push",{params:{path:{branch_id:t}},body:{}});s(e,"Failed to rebase branch")}},storage:{async listAllBuckets(t){let e=await r.GET("/v1/projects/{ref}/storage/buckets",{params:{path:{ref:t}}});return s(e,"Failed to list storage buckets"),e.data},async getStorageConfig(t){let e=await r.GET("/v1/projects/{ref}/config/storage",{params:{path:{ref:t}}});return s(e,"Failed to get storage config"),e.data},async updateStorageConfig(t,e){let a=await r.PATCH("/v1/projects/{ref}/config/storage",{params:{path:{ref:t}},body:{fileSizeLimit:e.fileSizeLimit,features:{imageTransformation:{enabled:e.features.imageTransformation.enabled},s3Protocol:{enabled:e.features.s3Protocol.enabled}}}});return s(a,"Failed to update storage config"),a.data}}}}function V(i){switch(i){case"api.supabase.com":return"supabase.co";case"api.supabase.green":return"supabase.green";default:return"supabase.red"}}export{le as a};
//# sourceMappingURL=chunk-KH3JZGVH.js.map